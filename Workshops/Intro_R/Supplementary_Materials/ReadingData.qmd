## Importing data

Before we get into examples, we need to understand how to tell the computer where files are.

### From URL

```{r}
bikes <- read_csv('http://mac-stat.github.io/data/bike_share.csv')
```

Go to [http://mac-stat.github.io/data/bike_share.csv](http://mac-stat.github.io/data/bike_share.csv) and save the file to your computer to a `data` folder within that `RStudio_Workshop` folder on your Desktop.

### From local file (File Paths)

```{r}
# Absolute File Path, If on a Mac
bikes <- read_csv('~/Desktop/RStudio_Workshop/data/bike_share.csv')
```

```{r}
# Relative File Path (relative to the `RStudio_Workshop` folder)
bikes <- read_csv('data/bike_share.csv')
```

There are a few important things to keep in mind here:
- A file path is always a string (it has quotes around it), like "mydata.csv".
- The file path can tell the computer what to do in two ways:
  - first, we can give the "absolute file path". The string you would enter as your file path might look something like this: "/Users/kylesuelflow/Macalester-Stuff/R_Preceptor/Workshops/Intro_R/Supplementary_Materials"
  - This is really long! *We don't need to do this!*
  - Instead, use *relative file paths*
  - Relative paths show the file path relative to where your working directory is. 
  - How do I know where my working directory is?
  - I would



### Best Practice (Hot Tips)

Set working directory to source file

```{r}
#getwd()

#setwd()
```

## Different Data File Types

There are many functions you can use to read in data in R, depending upon what file type you have. Here are some examples of reading in data using the most common filetypes.


 Whenever you are using a function to read in data (such as `read_csv()`, `read_sheet()`, `read_excel`), you'll provide the function a filepath, telling the computer which file you want to have it parse into a data frame. 

TO DO: add package names for excel, sheets, stata, spss, etc. 

```{r}
library(tidyverse)
read_csv()
```

Hot Tip: CSV are preferred (can convert excel file to csv in Excel)




